"""
绘制炸弹轨迹其实就是绘制一根曲线。绘制曲线的原理类似描点法，先绘制曲线上的 n 个点，再把 n 个点连起来形成曲线。
　　绘制 n 个点用的还是plot函数，使用方法跟之前一样，区别在于xt和yt里面存放的内容。之前xt和yt存放的是两个数，
表示一个点的横坐标和纵坐标，plot绘制出的就是一个点。而现在要绘制曲线，xt和yt是两个列表，里面存放了曲线上
 n 个点的坐标，其中，xt存放了 n 个点的横坐标，yt存放了 n 个点的纵坐标。因此，xt[0]和yt[0]存放的就是
 第 1 个点的坐标，xt[1]和yt[1]存放的是下一个点的坐标，等等。这样plot就能绘制出曲线上的 n 个点。
那怎么把 n 个点连起来形成曲线呢？很简单，只要修改下图形的格式，之前plot中使用的是ro，改成r-即可，-表示用线段把 n 个点连起来。
　　所以初始代码第 10 行的plt.plot(xt,yt,'r-')就是绘制轨迹上的 n 个点，并把这些点用线段连起来，就形成炸弹的轨迹了。

创建空列表的原因
　　初始代码第 6 行是xt,yt=[ ],[ ]，功能是将xt和yt的初始值设置成空列表，即不包含任何元素的列表。
　　之所以要将xt和yt定义成空列表，是因为在 Begin-End 区间要对xt和yt进行一些列表专有的操作，如果不预先将它们设置成列表类型，
在进行这些操作的时候就会报错。但在开始时，并不知道xt和yt中有什么元素，只好将其设置成什么元素都没有的空列表，后面再往里面添加元素。

求解思路
　　综上，Begin-End 区间代码的主要作用应该是利用循环（for 循环或 while 循环均可）计算 n 个时刻对应的 n 个坐标，每次循环计
算一个时刻的坐标，并利用append函数将这个时刻的横坐标添加到xt、纵坐标添加到yt。循环结束后，xt和yt中就分别存放了 n 个时刻的横
坐标和纵坐标，从而可以利用plot函数达到绘制轨迹的效果。
"""

import matplotlib.pyplot as plt
h, v0, g = 3000, 200, 9.8
t, n=0, 30
tmax=(2*h/g)**0.5
delta = tmax/(n-1)
xt,yt=[ ],[ ]
########## Begin ##########
while t<=tmax:
    xt.append(v0*t)
    yt.append(h-1/2*g*t**2)
    t =t + delta
#for i in range(len(xt)):
    #plt.plot(xt[i],yt[i],'ro')
########## End ##########
plt.plot(xt,yt,'r-')
plt.grid('on')
plt.axis([0, 5000, 0, h])
plt.show()

plt.savefig( 'src/step4/student/pic.png' )
plt.close()
